data[,'train'] <- ifelse(runif(nrow(data))<0.70,1,0)
testData = data[data$train==0,]
trainData = data[data$train==1,]
testData$train<-NULL
checkSet <- as.data.frame(testData)
testData$result <- NULL
trainData$train<-NULL
j48 <<- J48(result~.,data = trainData)
j <- 0
for(i in 1:nrow(testData)){
if(predict(j48, testData[i,])[1] == checkSet[i,"result"]){
j = j + 1
}
}
print(j)
plot(j48)
return(j48)
}
main = function(){
init()
makeArff()
tree <- buildTree()
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
}
main()
j48$predictions
wd <- getwd()
data <- read.arff(paste(wd,"/temp.arff",sep=""))
data[,'train'] <- ifelse(runif(nrow(data))<0.70,1,0)
testData = data[data$train==0,]
trainData = data[data$train==1,]
testData$train<-NULL
checkSet <- as.data.frame(testData)
testData$result <- NULL
trainData$train<-NULL
j48 <<- J48(result~.,data = trainData)
j <- 0
for(i in 1:nrow(testData)){
if(predict(j48$predictions, testData[i,])[1] == checkSet[i,"result"]){
j = j + 1
}
}
print(j)
wd <- getwd()
data <- read.arff(paste(wd,"/temp.arff",sep=""))
data[,'train'] <- ifelse(runif(nrow(data))<0.70,1,0)
testData = data[data$train==0,]
trainData = data[data$train==1,]
testData$train<-NULL
checkSet <- as.data.frame(testData)
testData$result <- NULL
trainData$train<-NULL
j48 <<- J48(result~.,data = trainData)
j <- 0
for(i in 1:nrow(testData)){
if(predict(j48$predictions, testData[i,])[1] == checkSet[i,"result"]){
j = j + 1
}
}
print(j)
j48$terms
j48$classifier
tree <- buildTree()
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
shiny = function(tree){
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
titlePanel(NULL),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', FALSE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'')
),
mainPanel(
tableOutput('contents'),
leafletOutput("mymap")
)),
sidebarLayout(
sidebarPanel(
h4("Determine the route closest to your route by using the decision tree."),
actionButton("submit","Go!"),
tags$style(type='text/css', "#submit { vertical-align: middle; height: 50px; width: 100%; font-size: 30px;}"),
h4(textOutput("name"))
),
mainPanel(
leafletOutput("treemap")
)
)
)
server <- function(input, output, session) {
wd <- getwd()
points <- data.frame()
name <- ""
output$mymap <- renderLeaflet({
inFile <- input$file1
if (is.null(inFile)){
return(leaflet() %>%
addTiles())
}
points<-read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
points <<- points
colnames(points) <- c("lat","lon")
lon <- c(points$lon[1],points$lon[nrow(points)])
lat <- c(points$lat[1],points$lat[nrow(points)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
leaflet() %>%addTiles()%>%
addPolylines(lng = points$lon, lat=points$lat) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
observeEvent(input$submit, {
points <- interpolateRoute(points)
points <- calculateValues(points)
points <- transformFrame(points,"")
prediction <- predict(tree,points)
output$name <- renderText({
paste("The most similiar route is ",prediction[[1]])
})
route <- read.csv(paste(wd,"/",prediction[1],".csv",sep=""),header=FALSE)
lon <- c(route$V2[1],route$V2[nrow(route)])
lat <- c(route$V1[1],route$V1[nrow(route)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()%>%
addPolylines(lng = route$V2, lat=route$V1) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
})
}
shinyApp(ui, server)
}
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
shiny = function(tree){
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
titlePanel(NULL),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', FALSE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'')
),
mainPanel(
tableOutput('contents'),
leafletOutput("mymap")
)),
sidebarLayout(
sidebarPanel(
h4("Determine the route closest to your route by using the decision tree."),
actionButton("submit","Go!"),
tags$style(type='text/css', "#submit { vertical-align: middle; height: 50px; width: 100%; font-size: 30px;}"),
h4(textOutput("name"))
),
mainPanel(
leafletOutput("treemap")
)
),
br()
)
server <- function(input, output, session) {
wd <- getwd()
points <- data.frame()
name <- ""
output$mymap <- renderLeaflet({
inFile <- input$file1
if (is.null(inFile)){
return(leaflet() %>%
addTiles())
}
points<-read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
points <<- points
colnames(points) <- c("lat","lon")
lon <- c(points$lon[1],points$lon[nrow(points)])
lat <- c(points$lat[1],points$lat[nrow(points)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
leaflet() %>%addTiles()%>%
addPolylines(lng = points$lon, lat=points$lat) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
observeEvent(input$submit, {
points <- interpolateRoute(points)
points <- calculateValues(points)
points <- transformFrame(points,"")
prediction <- predict(tree,points)
output$name <- renderText({
paste("The most similiar route is ",prediction[[1]])
})
route <- read.csv(paste(wd,"/",prediction[1],".csv",sep=""),header=FALSE)
lon <- c(route$V2[1],route$V2[nrow(route)])
lat <- c(route$V1[1],route$V1[nrow(route)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()%>%
addPolylines(lng = route$V2, lat=route$V1) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
})
}
shinyApp(ui, server)
}
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
shiny = function(tree){
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
titlePanel(NULL),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', FALSE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'')
),
mainPanel(
tableOutput('contents'),
leafletOutput("mymap")
)),
sidebarLayout(
sidebarPanel(
h4("Determine the route closest to your route by using the decision tree."),
actionButton("submit","Go!"),
tags$style(type='text/css', "#submit { vertical-align: middle; height: 50px; width: 100%; font-size: 30px;}"),
h4(textOutput("name"))
),
mainPanel(
leafletOutput("treemap")
)
),
br()
)
server <- function(input, output, session) {
wd <- getwd()
points <- data.frame()
name <- ""
output$mymap <- renderLeaflet({
inFile <- input$file1
if (is.null(inFile)){
return(leaflet() %>%
addTiles())
}
points<-read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
points <<- points
colnames(points) <- c("lat","lon")
lon <- c(points$lon[1],points$lon[nrow(points)])
lat <- c(points$lat[1],points$lat[nrow(points)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
leaflet() %>%addTiles()%>%
addPolylines(lng = points$lon, lat=points$lat) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
observeEvent(input$submit, {
print(points)
points <- interpolateRoute(points)
points <- calculateValues(points)
points <- transformFrame(points,"")
prediction <- predict(tree,points)
output$name <- renderText({
paste("The most similiar route is ",prediction[[1]])
})
route <- read.csv(paste(wd,"/",prediction[1],".csv",sep=""),header=FALSE)
lon <- c(route$V2[1],route$V2[nrow(route)])
lat <- c(route$V1[1],route$V1[nrow(route)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()%>%
addPolylines(lng = route$V2, lat=route$V1) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
})
}
shinyApp(ui, server)
}
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
shiny = function(tree){
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
titlePanel(NULL),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', FALSE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'')
),
mainPanel(
tableOutput('contents'),
leafletOutput("mymap")
)),
sidebarLayout(
sidebarPanel(
h4("Determine the route closest to your route by using the decision tree."),
actionButton("submit","Go!"),
tags$style(type='text/css', "#submit { vertical-align: middle; height: 50px; width: 100%; font-size: 30px;}"),
h4(textOutput("name"))
),
mainPanel(
leafletOutput("treemap")
)
),
br()
)
server <- function(input, output, session) {
wd <- getwd()
points <- data.frame()
name <- ""
output$mymap <- renderLeaflet({
inFile <- input$file1
if (is.null(inFile)){
return(leaflet() %>%
addTiles())
}
points<-read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
points <<- points
colnames(points) <- c("lat","lon")
lon <- c(points$lon[1],points$lon[nrow(points)])
lat <- c(points$lat[1],points$lat[nrow(points)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
leaflet() %>%addTiles()%>%
addPolylines(lng = points$lon, lat=points$lat) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
observeEvent(input$submit, {
if(nrow(points) != 0){
points <- interpolateRoute(points)
points <- calculateValues(points)
points <- transformFrame(points,"")
prediction <- predict(tree,points)
output$name <- renderText({
paste("The most similiar route is ",prediction[[1]])
})
route <- read.csv(paste(wd,"/",prediction[1],".csv",sep=""),header=FALSE)
lon <- c(route$V2[1],route$V2[nrow(route)])
lat <- c(route$V1[1],route$V1[nrow(route)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()%>%
addPolylines(lng = route$V2, lat=route$V1) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
}})
}
shinyApp(ui, server)
}
if(!exists("shiny", mode="function")) source("C:/Users/Michiel/AI/shiny.R")
shiny(tree)
shiny = function(tree){
library(shiny)
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
titlePanel(NULL),
sidebarLayout(
sidebarPanel(
fileInput('file1', 'Choose CSV File',
accept=c('text/csv',
'text/comma-separated-values,text/plain',
'.csv')),
tags$hr(),
checkboxInput('header', 'Header', FALSE),
radioButtons('sep', 'Separator',
c(Comma=',',
Semicolon=';',
Tab='\t'),
','),
radioButtons('quote', 'Quote',
c(None='',
'Double Quote'='"',
'Single Quote'="'"),
'')
),
mainPanel(
tableOutput('contents'),
leafletOutput("mymap")
)),
sidebarLayout(
sidebarPanel(
h4("Determine the route closest to your route by using the decision tree."),
actionButton("submit","Go!"),
tags$style(type='text/css', "#submit { vertical-align: middle; height: 50px; width: 100%; font-size: 30px;}"),
h4(textOutput("name"))
),
mainPanel(
leafletOutput("treemap")
)
),
br()
)
server <- function(input, output, session) {
wd <- getwd()
points <- data.frame()
name <- ""
output$mymap <- renderLeaflet({
inFile <- input$file1
if (is.null(inFile)){
return(leaflet() %>%
addTiles())
}
points<-read.csv(inFile$datapath, header=input$header, sep=input$sep,
quote=input$quote)
points <<- points
colnames(points) <- c("lat","lon")
lon <- c(points$lon[1],points$lon[nrow(points)])
lat <- c(points$lat[1],points$lat[nrow(points)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
leaflet() %>%addTiles()%>%
addPolylines(lng = points$lon, lat=points$lat) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()
})
observeEvent(input$submit, {
if(nrow(points) != 0){
points <- interpolateRoute(points)
points <- calculateValues(points)
points <- transformFrame(points,"")
prediction <- predict(tree,points)
output$name <- renderText({
paste("The most similiar route is ",prediction[[1]])
})
route <- read.csv(paste(wd,"/",prediction[1],".csv",sep=""),header=FALSE)
lon <- c(route$V2[1],route$V2[nrow(route)])
lat <- c(route$V1[1],route$V1[nrow(route)])
output$treemap <- renderLeaflet({
leaflet() %>% addTiles()%>%
addPolylines(lng = route$V2, lat=route$V1) %>% addMarkers(lon,lat, popup = as.character(c("Start","End")))
})
}
})
}
shinyApp(ui, server)
}
